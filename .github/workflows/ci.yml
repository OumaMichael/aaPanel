name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  release:
    types: [ published ]

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  # Security and Code Quality Checks
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run CodeQL Analysis
      uses: github/codeql-action/init@v3
      with:
        languages: python, javascript

    - name: Perform CodeQL Analysis
      uses: github/codeql-action/analyze@v3

    - name: Security Audit for Python
      run: |
        python -m pip install --upgrade pip
        pip install safety
        safety check --full-report

  # Build and Test on Multiple OS
  build-and-test:
    name: Build and Test
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-22.04, ubuntu-20.04]
        python-version: ['3.9', '3.10', '3.11']

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}

    - name: Cache pip dependencies
      uses: actions/cache@v3
      with:
        path: ~/.cache/pip
        key: ${{ runner.os }}-pip-${{ hashFiles('**/requirements.txt') }}
        restore-keys: |
          ${{ runner.os }}-pip-

    - name: Install system dependencies
      run: |
        sudo apt-get update
        sudo apt-get install -y curl wget git build-essential

    - name: Install Python dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov flake8 black

    - name: Lint with flake8
      run: |
        flake8 . --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 . --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics

    - name: Format check with black
      run: black --check --diff .

    - name: Run tests
      run: |
        pytest --cov=./ --cov-report=xml

    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
        flags: unittests
        name: codecov-umbrella

  # Build Docker Image
  build-docker:
    name: Build Docker Image
    runs-on: ubuntu-latest
    needs: [security-scan, build-and-test]
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3

    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}

    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}

    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  # Generate SHA256 and GPG signatures
  generate-signatures:
    name: Generate Signatures
    runs-on: ubuntu-latest
    needs: build-docker
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Generate SHA256 checksums
      run: |
        find . -name "*.sh" -type f -exec sha256sum {} \; > SHA256SUMS.txt
        find . -name "*.py" -type f -exec sha256sum {} \; >> SHA256SUMS.txt

    - name: Import GPG key
      run: |
        echo "${{ secrets.GPG_PRIVATE_KEY }}" | gpg --import --batch --yes
        echo "${{ secrets.GPG_PASSPHRASE }}" | gpg --batch --yes --passphrase-fd 0 --pinentry-mode loopback --sign

    - name: Sign files with GPG
      run: |
        gpg --detach-sign --armor --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --pinentry-mode loopback install.sh
        gpg --detach-sign --armor --batch --yes --passphrase "${{ secrets.GPG_PASSPHRASE }}" --pinentry-mode loopback SHA256SUMS.txt

    - name: Upload signatures as artifacts
      uses: actions/upload-artifact@v3
      with:
        name: signatures
        path: |
          *.asc
          SHA256SUMS.txt

  # Deploy to staging
  deploy-staging:
    name: Deploy to Staging
    runs-on: ubuntu-latest
    needs: generate-signatures
    if: github.ref == 'refs/heads/main'
    environment: staging

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download signatures
      uses: actions/download-artifact@v3
      with:
        name: signatures

    - name: Deploy to staging server
      run: |
        echo "Deploying to staging environment..."
        # Add your deployment commands here
        # Example: rsync, scp, or deployment scripts

  # Create Release
  create-release:
    name: Create Release
    runs-on: ubuntu-latest
    needs: [build-docker, generate-signatures]
    if: github.event_name == 'release'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Download signatures
      uses: actions/download-artifact@v3
      with:
        name: signatures

    - name: Update release with signatures
      uses: softprops/action-gh-release@v1
      with:
        files: |
          install.sh
          SHA256SUMS.txt
          install.sh.asc
          SHA256SUMS.txt.asc
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Performance and Load Testing
  performance-test:
    name: Performance Test
    runs-on: ubuntu-latest
    needs: deploy-staging
    if: github.ref == 'refs/heads/main'

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run performance tests
      run: |
        echo "Running performance tests..."
        # Add performance testing commands here
        # Example: JMeter, k6, or custom performance scripts

  # Security Vulnerability Scan
  vulnerability-scan:
    name: Vulnerability Scan
    runs-on: ubuntu-latest
    needs: build-docker

    steps:
    - name: Checkout code
      uses: actions/checkout@v4

    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: 'fs'
        scan-ref: '.'
        format: 'sarif'
        output: 'trivy-results.sarif'

    - name: Upload Trivy scan results to GitHub Security tab
      uses: github/codeql-action/upload-sarif@v2
      if: always()
      with:
        sarif_file: 'trivy-results.sarif'

  # Notification
  notify:
    name: Send Notifications
    runs-on: ubuntu-latest
    needs: [build-and-test, build-docker, vulnerability-scan]
    if: always()

    steps:
    - name: Send notification on failure
      if: failure()
      run: |
        echo "Pipeline failed. Sending notification..."
        # Add notification commands here (Slack, Discord, email, etc.)

    - name: Send notification on success
      if: success()
      run: |
        echo "Pipeline completed successfully!"
        # Add success notification commands here
